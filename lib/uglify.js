// Generated by CoffeeScript 1.3.3
(function() {
  var fs, jsp, pro;

  jsp = (require("uglify-js")).parser;

  pro = (require("uglify-js")).uglify;

  fs = require('fs');

  exports.makeHandler = function(filename, config) {
    var handler, showCopyright, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    if (config == null) {
      config = {};
    }
    if ((_ref = config.strict_semicolons) == null) {
      config.strict_semicolons = void 0;
    }
    if ((_ref1 = config.ast_lift_variables) == null) {
      config.ast_lift_variables = false;
    }
    if ((_ref2 = config.ast_mangle_options) == null) {
      config.ast_mangle_options = {};
    }
    if ((_ref3 = config.ast_squeeze_options) == null) {
      config.ast_squeeze_options = {};
    }
    if ((_ref4 = config.gen_code_options) == null) {
      config.gen_code_options = {};
    }
    if ((_ref5 = config.comments_before) == null) {
      config.comments_before = true;
    }
    if ((_ref6 = config.prepend) == null) {
      config.prepend = '';
    }
    showCopyright = function(commentTokens) {
      var parts, token;
      parts = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = commentTokens.length; _i < _len; _i++) {
          token = commentTokens[_i];
          if (token.type === 'comment1') {
            _results.push("//" + token.value + "\n");
          } else {
            _results.push("/*" + token.value + "*/");
          }
        }
        return _results;
      })();
      return parts.join('');
    };
    handler = function(stream) {
      var _this = this;
      return fs.readFile(filename, function(err, code) {
        var ast, codeString, result;
        if (err) {
          return stream.log.error(err);
        }
        codeString = code.toString();
        result = "";
        if (config.prepend) {
          result += config.prepend;
        }
        if (config.comments_before) {
          result += showCopyright(jsp.tokenizer(codeString)().comments_before);
        }
        ast = jsp.parse(code.toString(), config.strict_semicolons);
        if (config.ast_lift_variables) {
          ast = pro.ast_lift_variables(ast);
        }
        ast = pro.ast_mangle(ast, config.ast_mangle_options);
        ast = pro.ast_squeeze(ast, config.ast_squeeze_options);
        result += pro.gen_code(ast, config.gen_code_options);
        return stream.endWithMime(result, "application/javascript");
      });
    };
    return handler;
  };

}).call(this);
